//This is from my javascript pratice from codecademy.
//2 blank line denotes each new lesson.
//Cody Bone  10/19/2014


for(var i=1; i<=20; i++){
    if(i%3===0 && i%5===0){
        console.log("FizzBuzz");
    }
    else if(i%5===0){
        console.log("Buzz");
    }
    else if(i%3===0){
        console.log("Fizz");
    }
    else{
        console.log(i);
    }
}


var getReview = function (movie) {
    switch(movie){
        case 'Toy Story 2':
            return "Great story. Mean prospector.";
            break;
        case 'Finding Nemo':
            return "Cool animation, and funny turtles.";
            break;
        case 'The Lion King':
            return "Great songs.";
            break;
        default:
            return "I don't know!";
    }
};


var bob={
    
};


var Spencer = {
  age: 22,
  country: "United States"
};
// make your own object here called me
var me={
  age: 29,
  country: "United States"
};


var bob = {
  name: "Bob Smith",
  age: 30
};
var susan = {
  name: "Susan Jordan",
  age: 25
};
// here we save Bob's information
var name1 = bob.name;
var age1 = bob.age;
// finish this code by saving Susan's information
var name2 =susan.name;
var age2 =susan.age;


// Take a look at our next example object, a dog
var dog = {
  species: "greyhound",
  weight: 60,
  age: 4
};
var species = dog["species"];
// fill in the code to save the weight and age using bracket notation
var weight =dog["weight"];
var age =dog["age"];


// Our bob object again, but made using a constructor this time 
var bob = new Object();
bob.name = "Bob Smith";
bob.age = 30;
// Here is susan1, in literal notation
var susan1 = {
  name: "Susan Jordan",
  age: 24
};
// Make a new susan2 object, using a constructor instead
var susan2=new Object();
susan2.name="Susan Jordan";
susan2.age=24;


// help us make snoopy using literal notation
// Remember snoopy is a "beagle" and is 10 years old.
var snoopy ={
    species: "beagle",
    age: 10
}
// help make buddy using constructor notation
// buddy is a "golden retriever" and is 5 years old
var buddy = new Object();
buddy.species="golden retriever";
buddy.age=5;


var bicycle=new Object();
bicycle.speed=0;
bicycle.gear=1;
bicycle.frame_material="carbon fiber";


// Accepts a number x as input and returns its square
var square = function (x) {
  return x * x;
};

// Write the function multiply below
// It should take two parameters and return the product
var multiply=function(x,y){
  return x*y;  
};
console.log(multiply(5,2));


// here is bob again, with his usual properties
var bob = new Object();
bob.name = "Bob Smith";
bob.age = 30;
// this time we have added a method, setAge
bob.setAge = function (newAge){
  bob.age = newAge;
};
// here we set bob's age to 40
bob.setAge(40);
// bob's feeling old.  Use our method to set bob's age to 20
bob.setAge(20);


var bob = new Object();
bob.age = 17;
// this time we have added a method, setAge
bob.setAge = function (newAge){
  bob.age = newAge;
};

bob.getYearOfBirth = function () {
  return 2014 - bob.age;
};
console.log(bob.getYearOfBirth());


// here we define our method using "this", before we even introduce bob
var setAge = function (newAge) {
  this.age = newAge;
};
// now we make bob
var bob = new Object();
bob.age = 30;
// and down here we just use the method we already made
bob.setAge = setAge;
// change bob's age to 50 here
bob.setAge(50);


// here we define our method using "this", before we even introduce bob
var setAge = function (newAge) {
  this.age = newAge;
};
// now we make bob
var bob = new Object();
bob.age = 30;
bob.setAge = setAge;  
// make susan here, and first give her an age of 25
var susan=new Object();
susan.age=25;
susan.setAge=setAge;
// here, update Susan's age to 35 using the method
susan.setAge(35);


var rectangle = new Object();
rectangle.height = 3;
rectangle.width = 4;
// here is our method to set the height
rectangle.setHeight = function (newHeight) {
  this.height = newHeight;
};
// help by finishing this method
rectangle.setWidth = function (newWidth){
    this.width=newWidth;
}
// here change the width to 8 and height to 6 using our new methods
rectangle.setHeight(6);
rectangle.setWidth(8);


var square = new Object();
square.sideLength = 6;
square.calcPerimeter = function() {
  return this.sideLength * 4;
};
// help us define an area method here
square.calcArea=function(){
    return this.sideLength*this.sideLength;
}
var p = square.calcPerimeter();
var a = square.calcArea();


// here we make bob using the Object constructor
var bob = new Object();
bob.name = "Bob Smith";
// add bob's age here and set it equal to 20
bob.age=20;


function Person(name,age) {
  this.name = name;
  this.age = age;
}
// Let's make bob and susan again, using our constructor
var bob = new Person("Bob Smith", 30);
var susan = new Person("Susan Jordan", 25);
// help us make george, whose name is "George Washington" and age is 275
var george=new Person("George Washington", 275);


function Cat(age, color) {
  this.age = age;
  this.color = color;
}
// make a Dog constructor here
function Dog(age, name, breed){
    this.age=age;
    this.name=name;
    this.breed=breed;
}


function Person(name,age) {
  this.name = name;
  this.age = age;
  this.species = "Homo Sapiens";
}
var sally = new Person("Sally Bowles", 39); 
var holden = new Person("Holden Caulfield", 16);
console.log("sally's species is " + sally.species + " and she is " + sally.age);
console.log("holden's species is " + holden.species + " and he is " + holden.age);


function Rectangle(height, width) {
  this.height = height;
  this.width = width;
  this.calcArea = function() {
      return this.height * this.width;
  };
  // put our perimeter function here!
  this.calcPerimeter=function(){
      return 2*(this.height+this.width);
  }
}
var rex = new Rectangle(7,3);
var area = rex.calcArea();
var perimeter = rex.calcPerimeter();


function Rabbit(adjective) {
    this.adjective = adjective;
    this.describeMyself = function() {
        console.log("I am a " + this.adjective + " rabbit");
    };
}
// now we can easily make all of our rabbits
var rabbit1=new Rabbit("fluffy");
var rabbit2=new Rabbit("happy");
var rabbit3=new Rabbit("sleepy");
console.log(rabbit1.describeMyself);
console.log(rabbit2.describeMyself);
console.log(rabbit3.describeMyself);


// Our person constructor
function Person (name, age) {
    this.name = name;
    this.age = age;
}
// Now we can make an array of people
var family = new Array();
family[0] = new Person("alice", 40);
family[1] = new Person("bob", 42);
family[2] = new Person("michelle", 8);
// add the last family member, "timmy", who is 6 years old
family[3]=new Person("timmy", 6);


// Our Person constructor
function Person(name, age){
    this.name=name;
    this.age=age;
}
// Now we can make an array of people
var family=[];
family[0]=new Person("alice", 40);
family[1]=new Person("bob", 42);
family[2]=new Person("michelle", 8);
family[3]=new Person("timmy", 6);
// loop through our new array
for(var i=0; i<family.length; i++){
    console.log(family[i].name);
}


// Our person constructor
function Person (name, age) {
    this.name = name;
    this.age = age;
}
// We can make a function which takes persons as arguments
// This one computes the difference in ages between two people
var ageDifference = function(person1, person2) {
    return person1.age - person2.age;
}
var alice = new Person("Alice", 30);
var billy = new Person("Billy", 25);
// get the difference in age between alice and billy using our function
var diff = ageDifference(alice, billy);


// Our person constructor
function Person (name, age) {
    this.name = name;
    this.age = age;
}
// We can make a function which takes persons as arguments
// This one computes the difference in ages between two people
var ageDifference = function(person1, person2) {
    return person1.age - person2.age;
};
// Make a new function, olderAge, to return the age of
// the older of two people
function olderAge(person1, person2){
    if(person1.age>person2.age){
        return person1.age;
    }
    else{
        return person2.age;
    }
}
// Let's bring back alice and billy to test our new function
var alice = new Person("Alice", 30);
var billy = new Person("Billy", 25);
console.log("The older person is " + olderAge(alice, billy));


var spencer = {
  age: 22,
  country: "United States"
};
// make spencer2 here with constructor notation
var spencer2=new Object();
spencer2.age=22;
spencer2.country="United States";


var snoopy = new Object();
snoopy.species = "beagle";
snoopy.age = 10;
// save Snoopy's age and species into variables
// use dot notation for snoopy's species
var species =snoopy.species;
// use bracket notation for snoopy's age
var age = snoopy["age"];


// 3 lines required to make harry_potter
var harry_potter = new Object();
harry_potter.pages = 350;
harry_potter.author = "J.K. Rowling";
// A custom constructor for book
function Book (pages, author) {
    this.pages = pages;
    this.author = author;
}
// Use our new constructor to make the_hobbit in one line
var the_hobbit=new Book(320, "J.R.R. Tolkien");


function Circle (radius) {
    this.radius = radius;
    this.area = function () {
        return Math.PI * this.radius * this.radius;
        
    };
    // define a perimeter method here
    this.perimeter=function(){
        return Math.PI*this.radius*2
    }
};


var bob = {
    firstName: "Bob",
    lastName: "Jones",
    phoneNumber: "(650) 777-7777",
    email: "bob.jones@example.com"
};
var mary = {
    firstName: "Mary",
    lastName: "Johnson",
    phoneNumber: "(650) 888-8888",
    email: "mary.johnson@example.com"
};
var contacts = [bob, mary];
function printPerson(person) {
    console.log(person.firstName + " " + person.lastName);
}
function list() {
	var contactsLength = contacts.length;
	for (var i = 0; i < contactsLength; i++) {
		printPerson(contacts[i]);
	}
}
/*Create a search function
then call it passing "Jones"*/
function search(lastName){
    for(var i=0; i<contacts.length; i++){
        if(lastName===contacts[i].lastName){
            printPerson(contacts[i]);
        }
    }
}
search("Jones");
function add(firstName, lastName, email, phoneNumber){
    var person={
        firstName: firstName,
        lastName: lastName,
        phoneNumber: phoneNumber,
        email: email,
    }
    contacts[contacts.length]=person;
}
add("Cody", "Bone", "cbone@test.com", "(555) 555-5555");
list();


var james = {
    // add properties to this object!
    job: "programmer",
    married: false
};
function Person(job, married) {
    this.job = job;
    this.married = married;
}
// create a "gabby" object using the Person constructor!
var gabby=new Person("student", true);


function Person(job, married) {
    this.job = job;
    this.married = married;
    // add a "speak" method to Person!
    this.speak=function(){
        console.log("Hello!");
    };
}
var user = new Person("Codecademy Student",false);
user.speak();


var james = {
    job: "programmer",
    married: false,
    speak: function( status ) {
        console.log("Hello, I am feeling "+status);
    }
};
james.speak("great");
james.speak("just okay");


var james = {
    job: "programmer",
    married: false,
    sayJob: function() {
        // complete this method
        console.log("Hi, I work as a "+this.job);
    }
};
// james' first job
james.sayJob();
// change james' job to "super programmer" here
james.job="super programmer";
// james' second job
james.sayJob();


var james = {
    job: "programmer",
    married: false
};
// set to the first property name of "james"
var aProperty = "job";
// print the value of the first property of "james" 
// using the variable "aProperty"
console.log(james[aProperty]);


// complete these definitions so that they will have
// the appropriate types
var anObj = { job: "I'm an object!" };
var aNumber = 42;
var aString = "I'm a string!";
console.log( typeof anObj ); // should print "object"
console.log( typeof aNumber ); // should print "number"
console.log( typeof aString ); // should print "string"


var myObj = {
    // finish myObj
    name: "Cody"
};
console.log( myObj.hasOwnProperty('name') ); // should print true
console.log( myObj.hasOwnProperty('nickname') ); // should print false


var suitcase = {
    shirt: "Hawaiian"
};
if(suitcase.hasOwnProperty('shorts')){
    console.log(suitcase.shorts);
}
else{
    suitcase.shorts="cargo";
}


var nyc = {
    fullName: "New York City",
    mayor: "Bill de Blasio",
    population: 8000000,
    boroughs: 5
};
for(var property in nyc){
    console.log(property);
}


var nyc = {
    fullName: "New York City",
    mayor: "Bill de Blasio",
    population: 8000000,
    boroughs: 5
};
// write a for-in loop to print the value of nyc's properties
for(var i in nyc){
    console.log(nyc[i]);
}


function Person(name,age) {
  this.name = name;
  this.age = age;
}
// Let's make bob again, using our constructor
var bob = new Person("Bob Smith", 30);
var susan = new Person("Susan Jordan", 35);
// make your own class here
function Circle(radius){
    this.radius=radius
}


function Dog (breed) {
  this.breed = breed;
}
// here we make buddy and teach him how to bark
var buddy = new Dog("Golden Retriever");
buddy.bark = function() {
  console.log("Woof");
};
buddy.bark();
// here we make snoopy
var snoopy = new Dog("Beagle");
// we need you to teach snoopy how to bark here
snoopy.bark=function(){
    console.log("meow");
}
// this causes an error, because snoopy doesn't know how to bark!
snoopy.bark();


function Person(name,age) {
  this.name = name;
  this.age = age;
}
// a function that prints the name of any given person
var printPersonName = function (p) {
  console.log(p.name);
};
var bob = new Person("Bob Smith", 30);
printPersonName(bob);
// make a person called me with your name and age
// then use printPersonName to print your name
var me=new Person("Cody",29);
printPersonName(me);


function Cat(name, breed) {
    this.name = name;
    this.breed = breed;
}
// let's make some cats!
var cheshire = new Cat("Cheshire Cat", "British Shorthair");
var gary = new Cat("Gary", "Domestic Shorthair");
// add a method "meow" to the Cat class that will allow
// all cats to print "Meow!" to the console
Cat.prototype.meow=function(){
    console.log("Meow!");
}
// add code here to make the cats meow!
console.log(cheshire.meow);
console.log(gary.meow);


// create your Animal class here
function Animal(name, numLegs){
    this.name=name;
    this.numLegs=numLegs;
}
// create the sayName method for Animal
Animal.prototype.sayName=function(){
    console.log("Hi my name is "+this.name);
}
// provided code to test above constructor and method
var penguin = new Animal("Captain Cook", 2);
penguin.sayName();


function Animal(name, numLegs) {
    this.name = name;
    this.numLegs = numLegs;
}
Animal.prototype.sayName = function() {
    console.log("Hi my name is " + this.name);
};


// create a Penguin constructor here
function Penguin(name, numLegs){
    this.name=name;
    this.numLegs=numLegs;
}
// create a sayName method for Penguins here
Penguin.prototype.sayName=function(){
    console.log("Hi my name is "+this.name);
}
// our test code
var theCaptain = new Penguin("Captain Cook", 2);
theCaptain.sayName();


// the original Animal class and sayName method
function Animal(name, numLegs) {
    this.name = name;
    this.numLegs = numLegs;
}
Animal.prototype.sayName = function() {
    console.log("Hi my name is " + this.name);
};
// define a Penguin class
function Penguin(name){
    this.name=name;
    this.numLegs=2;
}
// set its prototype to be a new instance of Animal
Penguin.prototype=new Animal();


// the original Animal class and sayName method
function Animal(name, numLegs) {
    this.name = name;
    this.numLegs = numLegs;
}
Animal.prototype.sayName = function() {
    console.log("Hi my name is " + this.name);
};
// define a Penguin class
function Penguin(name){
    this.name=name;
    this.numLegs=2;
}
// set its prototype to be a new instance of Animal
Penguin.prototype=new Animal();
var penguin=new Penguin("tom");
penguin.sayName();


function Penguin(name) {
    this.name = name;
    this.numLegs = 2;
}
// create your Emperor class here and make it inherit from Penguin
function Emperor(name){
    this.name=name;
}
Emperor.prototype=new Penguin();
// create an "emperor" object and print the number of legs it has
var emperor=new Emperor("tom");
console.log(emperor.numLegs);


// original classes
function Animal(name, numLegs) {
    this.name = name;
    this.numLegs = numLegs;
    this.isAlive = true;
}
function Penguin(name) {
    this.name = name;
    this.numLegs = 2;
}
function Emperor(name) {
    this.name = name;
    this.saying = "Waddle waddle";
}
// set up the prototype chain
Penguin.prototype = new Animal();
Emperor.prototype = new Penguin();
var myEmperor = new Emperor("Jules");
console.log( myEmperor.saying ); // should print "Waddle waddle"
console.log( myEmperor.numLegs ); // should print 2
console.log( myEmperor.isAlive ); // should print true


function Person(first,last,age) {
   this.firstName = first;
   this.lastName = last;
   this.age = age;
}
var john = new Person('John','Smith',30);
var myFirst = john.firstName;
var myLast = john.lastName;
//declare variable myAge set to the age of the john object.
var myAge=john.age;


function Person(first,last,age) {
   this.firstname = first;
   this.lastname = last;
   this.age = age;
   var bankBalance = 7500;
}
// create your Person 
var john=new Person("john", "smith", 29);
// try to print his bankBalance
console.log(john.bankBalance);


function Person(first,last,age) {
   this.firstname = first;
   this.lastname = last;
   this.age = age;
   var bankBalance = 7500;
  
   this.getBalance = function() {
      // your code should return the bankBalance
      return bankBalance;
   };
}
var john = new Person('John','Smith',30);
console.log(john.bankBalance);
// create a new variable myBalance that calls getBalance()
var myBalance=john.getBalance();
console.log(myBalance);


function Person(first,last,age) {
   this.firstname = first;
   this.lastname = last;
   this.age = age;
   var bankBalance = 7500;
  
   this.askTeller = function(pass) {
     if (pass == 1234) return bankBalance;
     else return "Wrong password.";
   };
}
var john = new Person('John','Smith',30);
/* the variable myBalance should access askTeller()
   with a password as an argument  */
var myBalance=john.askTeller(1234);


var languages = {
    english: "Hello!",
    french: "Bonjour!",
    notALanguage: 4,
    spanish: "Hola!"
};
// print hello in the 3 different languages
for(var o in languages){
    if(typeof languages[o]==="string"){
        console.log(languages[o]);
    }
}


function Dog (breed) {
    this.breed = breed;
};
// add the sayHello method to the Dog class 
// so all dogs now can say hello
Dog.prototype.sayHello=function(){
    console.log("Hello this is a "+this.breed+" dog");
}
var yourDog = new Dog("golden retriever");
yourDog.sayHello();
var myDog = new Dog("dachshund");
myDog.sayHello();


// what is this "Object.prototype" anyway...?
var prototypeType = typeof Object.prototype;
console.log(prototypeType);
// now let's examine it!
var hasOwn =Object.prototype.hasOwnProperty("hasOwnProperty");
console.log(hasOwn);


function StudentReport() {
    var grade1 = 4;
    var grade2 = 2;
    var grade3 = 1;
    this.getGPA = function() {
        return (grade1 + grade2 + grade3) / 3;
    };
}
var myStudentReport = new StudentReport();
for(var x in myStudentReport) {
    if(typeof myStudentReport[x] !== "function") {
        console.log("Muahaha! " + myStudentReport[x]);
    }
}
console.log("Your overall GPA is " + myStudentReport.getGPA());


//Create the object called cashRegister 
//and initialize its total property
function Register(){
    total=0;
}
var cashRegister=new Register();
//Using dot notation change the total property
cashRegister.total=2.99;


var cashRegister = {
    total:0,
    add: function(itemCost){
        this.total += itemCost;
    }
};
//call the add method for our items
cashRegister.add(.98);
cashRegister.add(1.23);
cashRegister.add(4.99);
cashRegister.add(.45);
//Show the total bill
console.log('Your bill is '+cashRegister.total);


var cashRegister = {
    total:0,
    add: function(itemCost){
        this.total += itemCost;
    },
    scan: function(item, num) {
        switch (item) {
        case "eggs": this.add(0.98*num); break;
        case "milk": this.add(1.23*num); break;
        case "magazine": this.add(4.99*num); break;
        case "chocolate": this.add(0.45*num); break;
        }
    }
};
// scan each item 4 times
cashRegister.scan("eggs",4);
cashRegister.scan("milk",4);
cashRegister.scan("magazine",4);
cashRegister.scan("chocolate",4);
//Show the total bill
console.log('Your bill is '+cashRegister.total);


var cashRegister = {
    total:0,
    add: function(itemCost){
        this.total += itemCost;
    },
    scan: function(item, num) {
        switch (item) {
        case "eggs": this.add(0.98*num); break;
        case "milk": this.add(1.23*num); break;
        case "magazine": this.add(4.99*num); break;
        case "chocolate": this.add(0.45*num); break;
        }
    }
};
// scan each item 4 times
cashRegister.scan("eggs",4);
cashRegister.scan("milk",4);
cashRegister.scan("magazine",4);
cashRegister.scan("chocolate",4);
//Show the total bill
console.log('Your bill is '+cashRegister.total);



