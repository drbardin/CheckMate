// Connect to database;
$MySQL:> connect;

// Drop tables in case database is not empty.;
$MySQL:> drop table Person;
$MySQL:> drop table Instructor;
$MySQL:> drop table Student;
$MySQL:> drop table Course;
$MySQL:> drop table Offering;
$MySQL:> drop table Enrollment;

// Create tables in database;

// ITEM 1: Person Table;
$MySQL:> create table Person (
	Name char(20),
	ID char(9) not null,
	Address char(30),
	DOB date,
	primary key (ID) 
);

//ITEM 2: Instructor Table;
$MySQL:> create table Instructor (
	InstructorID char(9) not null references Person(ID),
	Rank varchar(12),
	Salary int,
	primary key (InstructorID) 
);

//ITEM 3: Student Table;
$MySQL:> create table Student (
	StudentID char(9) not null references Person(ID),
	Classification varchar(10),
	GPA double,
	MentorID char(9) references Instructor(InstructorID),
	CreditHours int
	
);

//Item 4: Course Table;
$MySQL:> create table Course (
	CourseCode
 char(6) not null,
	CourseName char(50),
	PreReq char(6)
);

//Item 5: Offering Table;
$MySQL:> create table Offering (
	CourseCode
 char(6) not null,
	SectionNo int not null,
	InstructorID char(9) not null references Instructor,
	primary key (CourseCode, SectionNo)
);

//Item 6: Enrollment Table;
$MySQL:> create table Enrollment (
	CourseCode 
char(6) NOT NULL,
	SectionNo int NOT NULL,
	StudentID
 char(9) NOT NULL references Student,
	Grade
 char(4) NOT NULL,
	primary key (CourseCode, StudentID),
	foreign key (CourseCode, SectionNo) references Offering
);

// Check contents of empty tables;
$MySQL:> select * from Person;
$MySQL:> select * from Instructor;
$MySQL:> select * from Student;
$MySQL:> select * from Course;
$MySQL:> select * from Offering;
$MySQL:> select * from Enrollment;

// First view the data about to be loaded;
$OS:> ComS363\UniversityDatasets\University_Dataset.xml;

// ITEM 7-12;
// Load the data;
$MySQL:> load | Person | ComS363\UniversityDatasets\University_Dataset.xml;

$MySQL:> load | Instructor | ComS363\UniversityDatasets\University_Dataset.xml;
$MySQL:> load | Student | ComS363\UniversityDatasets\University_Dataset.xml;
$MySQL:> load | Course | ComS363\UniversityDatasets\University_Dataset.xml;
$MySQL:> load | Offering | ComS363\UniversityDatasets\University_Dataset.xml;
$MySQL:> load | Enrollment | ComS363\UniversityDatasets\University_Dataset.xml;

// Check loaded tables;
$MySQL:> select * from Person;
$MySQL:> select * from Instructor;
$MySQL:> select * from Student;
$MySQL:> select * from Course;
$MySQL:> select * from Offering;
$MySQL:> select * from Enrollment;

// ITEM 13;
// List the IDs of students and the IDs of their Mentors for students who are junior or senior having a GPA above 3.8
;
$MySQL:> select s.StudentID, s.MentorID
	from Student s
	where s.Classification = "Junior"
	or s.Classification = "Senior"
	and s.GPA > 3.8;

// ITEM 14;
// List the distinct course codes and sections for courses that are being taken by sophomores;
$MySQL:> select distinct e.CourseCode, e.SectionNo
	from Enrollment e, Student s
	where e.StudentID = s.StudentID
	and s.Classification = "Sophomore";

// ITEM 15;
// List the name and salary for mentors of all freshmen;
$MySQL:> select distinct p.Name, i.Salary
	from Person p, Instructor i, Student s
	where s.Classification = "Freshman"
	and i.InstructorID = s.MentorID
	and p.ID = i.InstructorID;

// ITEM 16;
// Find the total salary of all instructors who are not offering any courses
;
$MySQL:> select sum(i.Salary) as Total_Salary
	from Instructor i
	where i.InstructorID not in (select o.InstructorID from Offering o);

// ITEM 17;
// List all the names and DOBs of students who were born in 1976. The expression "Year(x.DOB) = 1976" checks if x is born in 1976
;
$MySQL:> select p.Name, p.DOB
	from Person p
	where Year(p.DOB)= 1976
	and p.ID in (select s.StudentID from Student s);

// ITEM 18;
// List the names and rank of instructors who neither offer a course nor mentor a student
;
$MySQL:> select p.Name, i.Rank
	from Person p, Instructor i
	where p.ID = i.InstructorID
	and i.InstructorID not in (select s.MentorID from Student s)
	and i.InstructorID not in (select o.InstructorID from Offering o);

// ITEM 19;
// Find the IDs, names, and DOB of the youngest student(s)
;
$MySQL:> select p.ID, p.Name, p.DOB
	from Person p
	where p.ID in (select s.StudentID from Student s)
	order by p.DOB asc;
	
// ITEM 20;
// List the IDs, DOB, and Names of Persons who are neither a student, nor an instructor
;
$MySQL:> select p.ID, p.DOB, p.Name
	from Person p
	where p.ID not in (select s.StudentID from Student s)
	and p.ID not in (select i.InstructorID from Instructor i);

// ITEM 21;
// For each instructor list his/her name and the number of students he/she mentors
;
$MySQL:> select p.Name, count(*) as Number_Mentored
	from Person p, Student s
	where p.ID = s.MentorID
	group by MentorID;
	
// ITEM 22;
// List the number of students and average GPA for each classification. Your query should not use constants such as "Freshman"
;
$MySQL:> select count(*) as Number_Students, avg(s.GPA) as Average_GPA, s.Classification
	from Student s
	group by Classification;

// ITEM 23;
// Report the course(s) with lowest enrollments.  You should output the course code and the number of enrollments
;
$MySQL:> select e.CourseCode, count(e.CourseCode) as Number_Enrolled
	from Enrollment e
	having count(e.CourseCode) <= all (select count(e.CourseCode) from Enrollment e );
	

// ITEM 24;
// List the IDs and Mentor IDs of students who are taking some course, offered by their mentor
;
$MySQL:> select s.StudentID, s.MentorID
	from Student s
	where s.StudentID in (select e.StudentID
		 	from Enrollment e
			where e.CourseCode in (select o.CourseCode 
					from Offering o 
					where s.MentorID  = o.InstructorID));

// ITEM 25;
// List the student id, name, and completed credit hours of all freshman born in or after 1976
;
$MySQL:> select s.StudentID, p.Name, s.CreditHours
	from Student s, Person p
	where p.ID = s.StudentID
	and s.Classification = "Freshman"
	and Year(p.DOB) >=1976;

// ITEM 26
// Insert the following student's information into the database;
// Name: Briggs Jason;
// ID: 480293439;
// Address: 215, North Hyland Avenue;
// DOB: 15th January 1975;
// Classification: Junior;
// GPA: 3.48;
// CreditHours: 75;
// MentorID: 201586985
// Enrolled in: CourseCode: CS311, SectionNo: 2;
// CS311 Grade: A;
// Enrolled in: CourseCode: CS330, SectionNo: 1;
// CS330 Grade: A-;
$MySQL:> insert into Person
(Name, ID, Address, DOB)
	values("Briggs Jason", 480293439, "215, North Hyland Avenue", 19750115);

$MySQL:> insert into Student(StudentID, Classification, GPA, CreditHours)
	values(480293439, "Junior", 3.48, 75
);
$MySQL:> update Student
	set MentorID = 201586985 
	where exists (select i.InstructorID from Instructor i where i.InstructorID = 201586985)
	and StudentID = 480293439;

$MySQL:> insert into Enrollment
	values("CS311", 2, 480293439, "A");
$MySQL:> insert into Enrollment
	values("CS330",1,480293439,"A-");

$MySQL:>Select *
	From Person P
	Where P.Name= "Briggs Jason"; 
$MySQL:>Select *
	From Student S
	Where S.StudentID= "480293439"; 
$MySQL:>Select *
	From Enrollment E
	Where E.StudentID = "480293439";

// ITEM 27;
// Delete the records of students from the database who have a GPA less than 0.5;
$MySQL:> delete from Enrollment
	where StudentID in (select s.StudentID from Student s where s.GPA<0.5);
$MySQL:> delete from Student
	where GPA < 0.5; 
$MySQL:>Select *
	From Student S
	Where S.GPA < 0.5;

// ITEM 28;
// In this part you update the Instructor table. To confirm the update, you execute two queries before and after making the update. First, execute the SQL query statements that are given below;
$MySQL:> Select P.Name, I.Salary
	From Instructor I, Person P
	Where I.InstructorID = P.ID
	and P.Name = "Ricky Ponting"; 
$MySQL:> Select P.Name, I.Salary
	From Instructor I, Person P
	Where I.InstructorID = P.ID
	and P.Name = "Darren Lehmann";

// Second, update Instructor table as follows: For instructors, Ricky Ponting and Darren Lehmann, if they  five or more students whose GPA is greater than 3.0, then raise their Salary by 10%;
$MySQL:> update Instructor
	set Salary = (Salary+(Salary*0.1))
	where InstructorID in (select o.InstructorID 
			from Offering o
			where o.CourseCode in ( select e.CourseCode 
					from Enrollment e
					where e.StudentID in (select s.StudentID 
							from Student s 
							where s.GPA > 3.0)))
	having count(*) >=5;
// Disconnect from database;
$MySQL:> disconnect;
